#! /usr/bin/python3
#################################################################
#    (c) Copyright 2009-2022 JRCS Ltd  - All Rights Reserved    #
#################################################################

import json
import os
import sys
import argparse

from librar import mysql as sql
from librar import schema

SCHEMA_FILE = f"{os.environ['BASE']}/python/etc/schema.json"

def type_change(col1,col2):
    if col1["type"] != col2["type"]:
        return True
    if "size" in col1 or "size" in col2:
        if "size" in col1 and "size" not in col2:
            return True
        if "size" in col2 and "size" not in col1:
            return True
        if col1["size"] != col2["size"]:
            return True
    if "null" in col1 or "null" in col2:
        if "null" in col1 and "null" not in col2:
            return True
        if "null" in col2 and "null" not in col1:
            return True
        if col1["null"] != col2["null"]:
            return True

    return False


parser = argparse.ArgumentParser(description='EPP Jobs Runner')
parser.add_argument("-C", '--recreate', action="store_true")
args = parser.parse_args()

sql.connect("admin")
live_schema = schema.make_schema(sql.my_database)

if args.recreate:
    with open(SCHEMA_FILE, "w") as fd:
        fd.write(json.dumps(live_schema, indent=3))
    sys.exit(0)


with open(SCHEMA_FILE, "r") as fd:
    save_schema = json.load(fd)

for table, table_data in save_schema.items():
    for column, column_data in table_data["columns"].items():
        sql = None

        if column not in live_schema[table]["columns"]:
            sql = f"alter table {table} add column {column}"
        elif type_change(live_schema[table]["columns"][column],column_data):
            sql = f"alter table {table} change column {column} {column}"

        if sql is not None:
            sql += f" {column_data['type']}"
            if "size" in column_data:
                sql += f"({column_data['size']})"
            if column_data["null"]:
                sql += " default NULL"
            else:
                sql += f" NOT NULL"
                if "default" in column_data:
                    if column_data['type'] in schema.numbers:
                        sql += f" default {column_data['default']}"
                    else:
                        sql += f" default \"{column_data['default']}\""
            print(sql)
